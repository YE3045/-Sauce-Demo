# 1) create a safe branch (only if you haven't already)
git checkout -b ci/add-workflow

# 2) create the workflow file
mkdir -p .github/workflows
cat > .github/workflows/ci.yml <<'YML'
name: CI - Playwright Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  actions: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        env:
          CI: true
        run: npx playwright test --reporter=dot,html --reporter=junit --output=playwright-report

      - name: Upload Playwright HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report

      - name: Upload JUnit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-results
          path: test-results || junit-results || test-results/results.xml
YML

# 3) append helpful CI/Report info to README.md
cat >> README.md <<'MD'

---

## Continuous Integration (GitHub Actions)

A GitHub Actions workflow has been added at `.github/workflows/ci.yml`.  
What it does:
- installs Node 18 and caches dependencies,
- installs Playwright browsers,
- runs the test suite (`npx playwright test`),
- generates an HTML Playwright report and JUnit output,
- uploads `playwright-report` and JUnit files as workflow artifacts (visible in the Actions run).

How to verify locally before pushing:
```bash
npm ci
npx playwright install
npx playwright test --headed   # run tests with UI for debugging
npx playwright show-report     # open the HTML report generated by the last run (if present)
